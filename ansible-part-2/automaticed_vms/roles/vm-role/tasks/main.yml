#SPDX-License-Identifier: MIT-0
---
- name: Mostrar la lista de mv para activar
  debug:
    msg: "Se creara {{ item.name }} "
  loop: "{{ vms_list }}"

- name: Fabricante del procesador
  debug:
    msg: "Este es el procesador {{ansible_processor[1]}} y este {{ansible_processor[2]}}" 

- name: Detectar el fabriante
  set_fact:
    processor: >
      {% set processor_name = (ansible_processor[1] ~ ansible_processor[2]) | lower | default('') %}
          {% if 'intel' in processor_name %}
            intel
          {% elif 'amd' in processor_name or 'ryzen' in processor_name %}
            amd
          {% else %}
            unknown
          {% endif %}

- name: Correr de manera correcta vm
  shell: |
    {% if processor == 'intel' %}
    modprobe -r kvm_intel && modprobe kvm_intel
    {% elif processor == 'amd' %}
    modprobe -r kvm_amd && modprobe kvm_amd
    {% else %}
    echo "Unknown processor type, skipping KVM module reload"
    {% endif %}
  become: yes


- name: Verificar si la VM ya existe
  shell: VBoxManage list vms | grep -q "^\"{{ item.name }}\"" || echo "VM_NOT_EXISTS"
  register: vm_exists_check
  loop: "{{ vms_list }}"
  failed_when: false
  changed_when: false

- name: Verificar si el directorio de la VM ya existe
  stat:
    path: "/vm/{{ item.name_total }}"
  register: vm_dir_exists
  loop: "{{ vms_list }}"

- name: Limpiar directorio de VM existente si la VM no está registrada
  file:
    path: "/vm/{{ item.item.name_total }}"
    state: absent
  loop: "{{ vm_dir_exists.results }}"
  when: 
    - item.stat.exists
    - vm_exists_check.results[ansible_loop.index0].stdout == "VM_NOT_EXISTS"
  become: yes

- name: Crear y configurar maquinas virtuales
  shell: |
    set -e
    OUT_ISO="{{ OUT_ISO }}"
    
    # Verificar si la VM ya existe
    if VBoxManage list vms | grep -q "^\"{{ item.name }}\""; then
      echo "VM {{ item.name }} ya existe, omitiendo creación"
      exit 0
    fi
    
    # Crear directorio base si no existe
    mkdir -p "/vm/{{ item.name_total }}"
    
    # Crear VM
    VBoxManage createvm --name "{{ item.name }}" --ostype Debian_64 --basefolder /vm --register
        
    # Configurar hardware
    VBoxManage modifyvm "{{ item.name }}" --firmware bios --boot1 dvd --boot2 disk --boot3 none --boot4 none
    VBoxManage modifyvm "{{ item.name }}" --memory {{ item.memory }} --cpus {{ item.cpus }} --audio-driver none --graphicscontroller vmsvga --vram 16
        
    # Crear disco duro - CORREGIDO: rutas consistentes
    VBoxManage createhd --filename "/vm/{{ item.name_total }}/{{ item.name_total }}.vdi" --size {{ item.disk_size }} --variant Standard
        
    # Configurar almacenamiento - CORREGIDO: rutas consistentes
    VBoxManage storagectl "{{ item.name }}" --name "SATA Controller" --add sata --controller IntelAhci
    VBoxManage storageattach "{{ item.name }}" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "/vm/{{ item.name_total }}/{{ item.name_total }}.vdi" --nonrotational on --hotpluggable on
        
    # Configurar red - CORREGIDO: sin comillas en MAC
    VBoxManage modifyvm "{{ item.name }}" --macaddress1 {{ item.mac_address }}
    VBoxManage modifyvm "{{ item.name }}" --nic1 bridged --bridgeadapter1 {{ item.interface }}
        
    # Configurar DVD
    VBoxManage storagectl "{{ item.name }}" --name "IDE Controller" --add ide
    VBoxManage storageattach "{{ item.name }}" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium "{{ OUT_ISO }}"
        
    # Iniciar VM
    VBoxManage startvm "{{ item.name }}" 
    
    echo "VM {{ item.name }} creada e iniciada exitosamente"
  loop: "{{ vms_list }}"
  environment:
    OUT_ISO: "{{ OUT_ISO }}"
  args:
    executable: /bin/bash
  register: vm_creation_result

- name: Mostrar resultado de la creación de VMs
  debug:
    msg: "{{ item.stdout_lines }}"
  loop: "{{ vm_creation_result.results }}"
  when: item.stdout_lines is defined and item.stdout_lines | length > 0

- name: Verificar VMs creadas
  shell: VBoxManage list vms
  register: final_vm_list
  changed_when: false

- name: Mostrar lista final de VMs
  debug:
    msg: "VMs disponibles: {{ final_vm_list.stdout_lines }}"


# tasks file for vm-role
