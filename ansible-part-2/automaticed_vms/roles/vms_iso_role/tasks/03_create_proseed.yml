---
# PASO 0: Definir el directorio SSH del usuario real (no root)
- name: Obtener directorio home del usuario que ejecuta
  set_fact:
    real_user_home: "{{ lookup('env', 'HOME') }}"
    real_user: "{{ lookup('env', 'USER') }}"

- name: Debug - informaci√≥n del usuario
  debug:
    msg: |
      Usuario real: {{ real_user }}
      HOME real: {{ real_user_home }}
      Buscando claves en: {{ real_user_home }}/.ssh/

# PASO 1: Listar qu√© hay en .ssh del usuario real
- name: Listar contenido de .ssh
  command: ls -la {{ real_user_home }}/.ssh/
  register: ssh_dir_content
  ignore_errors: yes
  changed_when: false
  become: no

- name: Mostrar contenido de .ssh
  debug:
    msg: "{{ ssh_dir_content.stdout_lines }}"
  when: ssh_dir_content.rc == 0

# PASO 2: Buscar CUALQUIER clave p√∫blica que exista
- name: Buscar claves p√∫blicas disponibles
  shell: |
    ls {{ real_user_home }}/.ssh/*.pub 2>/dev/null || echo ""
  register: available_keys
  changed_when: false
  become: no

- name: Mostrar claves encontradas
  debug:
    msg: |
      Claves p√∫blicas encontradas:
      {{ available_keys.stdout_lines if available_keys.stdout != '' else 'NINGUNA' }}

- name: DETENER si no hay NINGUNA clave p√∫blica
  fail:
    msg: |
      ‚ùå ERROR: No se encontr√≥ NINGUNA clave SSH p√∫blica
      
      Usuario: {{ real_user }}
      Directorio: {{ real_user_home }}/.ssh/
      
      Genera al menos UNA clave con:
        ssh-keygen -t ed25519 -f {{ real_user_home }}/.ssh/id_ed25519 -N ''
      O:
        ssh-keygen -t rsa -b 4096 -f {{ real_user_home }}/.ssh/id_rsa -N ''
  when: available_keys.stdout == ''

# PASO 3: Regenerar authorized_keys con TODAS las claves encontradas
- name: Regenerar authorized_keys con todas las claves p√∫blicas disponibles
  shell: |
    # Limpiar authorized_keys
    > {{ real_user_home }}/.ssh/authorized_keys
    
    # Agregar TODAS las claves p√∫blicas que existan
    for key in {{ real_user_home }}/.ssh/*.pub; do
      if [ -f "$key" ]; then
        cat "$key" >> {{ real_user_home }}/.ssh/authorized_keys
      fi
    done
    
    # Verificar que NO est√© vac√≠o
    if [ ! -s {{ real_user_home }}/.ssh/authorized_keys ]; then
      echo "ERROR: No se pudo crear authorized_keys" >&2
      exit 1
    fi
    
    # Ajustar permisos
    chmod 600 {{ real_user_home }}/.ssh/authorized_keys
    
    # Mostrar contenido
    echo "=== AUTHORIZED_KEYS CREADO ==="
    cat {{ real_user_home }}/.ssh/authorized_keys
  register: auth_keys_creation
  changed_when: true
  become: no

- name: Mostrar claves que se incluir√°n en el ISO
  debug:
    msg: "{{ auth_keys_creation.stdout_lines }}"

# PASO 4: Verificar que authorized_keys NO est√° vac√≠o
- name: Verificar tama√±o de authorized_keys
  stat:
    path: "{{ real_user_home }}/.ssh/authorized_keys"
  register: auth_keys_stat
  become: no

- name: DETENER si authorized_keys est√° vac√≠o
  fail:
    msg: |
      ‚ùå ERROR CR√çTICO: authorized_keys est√° VAC√çO
      Tama√±o: {{ auth_keys_stat.stat.size }} bytes
      
      Esto significa que no tienes claves SSH v√°lidas.
  when: auth_keys_stat.stat.size == 0

- name: ‚úÖ Confirmaci√≥n - authorized_keys tiene contenido
  debug:
    msg: |
      ‚úÖ authorized_keys verificado
      Tama√±o: {{ auth_keys_stat.stat.size }} bytes
      Ubicaci√≥n: {{ real_user_home }}/.ssh/authorized_keys

# PASO 5: Crear directorio de trabajo del ISO
- name: Crear directorio de trabajo si no existe
  file:
    path: "{{ WRK_DIR }}"
    state: directory
    mode: '0755'
  become: yes

# PASO 6: Copiar authorized_keys al ISO con verificaci√≥n
- name: Copiar authorized_keys al directorio del ISO
  copy:
    src: "{{ real_user_home }}/.ssh/authorized_keys"
    dest: "{{ WRK_DIR }}/authorized_keys"
    mode: '0644'
    remote_src: yes
  become: yes

# PASO 7: Verificar que se copi√≥ correctamente
- name: Leer contenido copiado al ISO
  command: cat "{{ WRK_DIR }}/authorized_keys"
  register: iso_auth_keys
  become: yes
  changed_when: false

- name: Verificar tama√±o del archivo en el ISO
  stat:
    path: "{{ WRK_DIR }}/authorized_keys"
  register: iso_auth_stat
  become: yes

- name: DETENER si el archivo en el ISO est√° vac√≠o
  fail:
    msg: |
      ‚ùå ERROR: authorized_keys se copi√≥ VAC√çO al ISO
      Tama√±o: {{ iso_auth_stat.stat.size }} bytes
  when: iso_auth_stat.stat.size == 0

- name: ‚úÖ Confirmaci√≥n final - Archivo en el ISO
  debug:
    msg: |
      ‚úÖ √âXITO: authorized_keys copiado al ISO
      Ubicaci√≥n: {{ WRK_DIR }}/authorized_keys
      Tama√±o: {{ iso_auth_stat.stat.size }} bytes
      Contenido:
      {{ iso_auth_keys.stdout }}

# PASO 8: Crear preseed.cfg
- name: Crear preseed para la instalaci√≥n
  template:
    src: preseed.cfg.j2
    dest: "{{ WRK_DIR }}/preseed.cfg"
  become: yes

- name: üìã RESUMEN FINAL
  debug:
    msg: |
      ========================================
      üîë CLAVES SSH CONFIGURADAS
      ========================================
      Usuario: {{ real_user }}
      ‚úÖ authorized_keys verificado en {{ real_user_home }}/.ssh/
      ‚úÖ authorized_keys verificado en {{ WRK_DIR }}/
      ‚úÖ preseed.cfg creado
      
      Las VMs tendr√°n acceso SSH sin password
      ========================================